name: Semgrep SCA Coverage Report

on:
  # Scan on-demand through GitHub Actions interface:
  workflow_dispatch: {}
  # Schedule the CI job (this method uses cron syntax):
  schedule:
    - cron: '20 17 * * *' # Sets Semgrep to scan every day at 17:20 UTC.
    
jobs:
  get-list-of-repos:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install requests
        pip install pandas
        
    - name: Get list of repositories
      env:
        # Generate PAT with Read-Only access to all repos in your GH ORG
        PAT_READ_ONLY_CUSTOMER_REPO: ${{ secrets.PAT_READ_ONLY_CUSTOMER_REPO }}
        SEMGREP_API_WEB_TOKEN:  ${{ secrets.SEMGREP_API_WEB_TOKEN }}
        SEMGREP_DEPLOYMENT_SLUG: ${{ vars.SEMGREP_DEPLOYMENT_SLUG }}
        DEBUG_LEVEL: ${{ vars.COVERAGE_REPORT_DEBUG_LEVEL }}

      run: |
        import requests
        import os
        import pandas as pd
        import json
        import sys
        import logging

        # Function to get 
        def get_deployment_id(token):
            headers = {"Accept": "application/json", "Authorization": "Bearer " + token}
            r = requests.get('https://semgrep.dev/api/v1/deployments',headers=headers)
            if r.status_code != 200:
                sys.exit(f'Could not get deployment: {r.status_code} {r.text}')
            org_id = str(r.json()['deployments'][0].get('id'))
            print("Accessing org: " + org_id)
            return org_id
        
        # Function to convert debug level from string to logging module constant
        def get_debug_level(level_str):
            return {
                'DEBUG': logging.DEBUG,
                'INFO': logging.INFO,
                'WARNING': logging.WARNING,
                'ERROR': logging.ERROR,
                'CRITICAL': logging.CRITICAL
            }.get(level_str.upper(), logging.INFO) # Default to INFO if not matched

        # Read DEBUG_LEVEL from environment and set logging level
        debug_level_str = os.getenv('DEBUG_LEVEL', 'INFO') # Default to INFO if not set
        print(f'Debug Level set to: {debug_level_str}')
        logging.basicConfig(level=get_debug_level(debug_level_str), format='%(asctime)s - %(levelname)s - %(message)s')

        def is_repo_empty(repo_name, pat):
            """
            Check if a GitHub repository is empty using the GitHub API.
            """
            url = f"https://api.github.com/repos/{repo_name}/branches"
            headers = {"Authorization": f"token {pat}"}
        
            try:
                response = requests.get(url, headers=headers)
                response.raise_for_status()  # Raise an error for bad responses
        
                # Check if the list of branches is empty
                if response.json():
                    logging.info(f"The repository '{repo_name}' is not empty.")
                    return "Not Empty"
                else:
                    logging.info(f"The repository '{repo_name}' is empty.")
                    return "Empty"
            except requests.exceptions.RequestException as e:
                logging.error(f"An error occurred while checking the repository: {e}")
                return False  # Assuming False in case of an error
        
        
        # GitHub repository in the format "org_name/repo_name"
        full_repo_name = os.environ['GITHUB_REPOSITORY']

        # Extract the organization name
        org_name = full_repo_name.split('/')[0]
        logging.info(f"Organization Name: {org_name}")
        pat = os.environ['PAT_READ_ONLY_CUSTOMER_REPO']
        headers = {'Authorization': f'token {pat}'}

        repos = []
        page = 1
        while True:
            url = f'https://api.github.com/orgs/{org_name}/repos?page={page}&per_page=100'
            response = requests.get(url, headers=headers)
            logging.debug(f"Requesting list of repos in Org: {org_name}, page: {page}")
            logging.debug(f"Response Code: {response.status_code}")
            page_repos = response.json()
            if not page_repos:
                break
            repos.extend(page_repos)
            page += 1
        logging.debug(f"Read list of repos from GitHub API successful- number of repos = {len(repos)} ")

        semgrep_token = os.environ['SEMGREP_API_WEB_TOKEN']
        headers = {"Accept": "application/json", "Authorization": "Bearer " + semgrep_token}
        params =  {"page_size": 3000}

        r = requests.get(f"https://semgrep.dev/api/v1/deployments/{os.environ['SEMGREP_DEPLOYMENT_SLUG']}/projects?page=0", params=params, headers=headers)
        if r.status_code != 200:
            logging.error("Getting list of projects from Semgrep failed - please check Semgrep API token")
            sys.exit(f'Get failed: {r.text}')

        semgrep_repos = json.loads(r.text)

        org_id = get_deployment_id(semgrep_token)
        r = requests.post(f"https://semgrep.dev/api/v1/deployments/{org_id}/dependencies/repositories")
        if r.status_code != 200:
            logging.error("Getting list of repositories with dependencies from Semgrep failed - please check Semgrep API token")
            sys.exit(f'Get failed: {r.text}')

        logging.debug("Getting list of repositories with dependencies from Semgrep successful")

        semgrep_repos_dep_details = json.loads(r.text)

        # Create a new list to store the merged results
        merged_results = []
    
        # Iterate over repositorySummaries and projects to find matching ids and merge them
        for repo in semgrep_repos_dep_details['repositorySummaries']:
            repo_id = repo['id']
            for project in semgrep_repos['projects']:
                if project['id'] == repo_id:
                    merged_result = {**repo, **project}
                    merged_results.append(merged_result)
        
        coverage_data = []
        
        for repo in repos:
            repo_name = repo['name']
            logging.debug(f"processing repo start- {repo_name}")
            repo_full_name = repo['full_name']
            created_at = repo['created_at']
            html_url = repo['html_url']
            repo_empty_state = is_repo_empty(repo_full_name, pat)

            latest_scan = None
            for sg_repo in merged_results:
                if sg_repo['name'] == repo_full_name:
                    latest_scan = sg_repo['latest_scan_at']
                    sca_coverage = 1
                else:
                    sca_coverage = 0
                    break
            
            if latest_scan is None:
                logging.info(f"{repo_name} not scanned by Semgrep yet")
            
            coverage_data.append([repo_name, sca_coverage, latest_scan, created_at, html_url, repo_empty_state])
            logging.debug(f"processing repo end- {repo_full_name}: {repo_name} , {sca_coverage}, {latest_scan}, {created_at}, {html_url}, {repo_empty_state}")

        
        coverage_df = pd.DataFrame(coverage_data, columns=['Repository', 'SCA Coverage', 'Latest Scan', 'Created At', 'URL', 'Is Repo Empty'])
        coverage_df.to_csv('coverage_sca.csv', index=False)
      
      shell: python
      
    - name: Upload coverage.CSV as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: semgrep-coverage-sca-report.csv
        path: |
          daily_repos_not_in_github_repos.csv
          weekly_repos_not_in_github_repos.csv
          coverage_sca.csv
